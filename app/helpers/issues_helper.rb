


module IssuesHelper
  def get_select_options(issue, key)
    select_options = []

    case key
    when :status
      select_options = [Issue.status_allowed, issue.status || Issue.status_default]
    when :priority
      select_options = [Issue.priority_allowed, issue.priority || Issue.priority_default]
    when :assignee_id
      assignee_options = []
      User.all.to_a.each do |user|
        assignee_options.append([user.email, user.id])
      end
      assignee_selected = issue.assignee.nil? ? nil : issue.assignee.id

      select_options = assignee_options, assignee_selected
    end
    
    select_options
  end


  def version_generate_text(issue, version)
    time_text = "#{time_ago_in_words(version.created_at)} ago"

    if version.event == "create"
      change_text = "#{issue.author.name} created the issue."
      yield [change_text, time_text]

    elsif version.event == "update"
      if version.previous.event == "update"
        # We want to skip 1 update -- (the one that gets generated by creating?)
        # If the issue was created in db/seeds.rb, we actually want to skip 2 updates
        #   the first edit of the seeded issue always generates body update
        #   regardless of if the body was actually updated (so we cant)

        if version.changeset.empty?
          # There are 'no changes', but an update has been generated 
          # -> the associated RichText was updated
          change_text = "#{User.find(version.whodunnit).name} updated the issue body."
          yield [change_text, time_text]

        else
          version.changeset.each_key do |key|
            # key_text = key
            # value_text = ""

            # case key
            # when "assignee_id"
            #   key_text = "assignee"
            #   value_text = "UNASSIGNED"

            #   user_index = version.changeset[key][1].to_i
            #   value_text = User.all.find(user_index).name unless user_index.zero?
              
            # when "status"
            #   value_text = version.changeset[key][1]
            # when "priority"
            #   value_text = version.changeset[key][1]
            # end
  
            # change_text = "#{User.find(version.whodunnit).name} updated the issue #{key_text} to #{value_text}"

            key_text = key == "assignee_id" ? "assignee" : key
            change_text = "#{User.find(version.whodunnit).name} updated the issue #{key_text}."
            yield [change_text, time_text]
          end
        end
      end
    end
  end

end